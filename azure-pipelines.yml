# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

variables:
- group: kvdevops1

stages:
  - stage: start_aci
    displayName: Build Prep
    pool:
      vmImage: ubuntu-latest
    jobs:
    - job: start_aci
      displayName: Start build agent
      steps:
      - task: AzureCLI@2
        displayName: Start Azure Container Instance
        inputs:
          azureSubscription: 'terraform'
          scriptType: 'bash'
          scriptLocation: 'inlineScript'
          inlineScript: 'az container start -n $(ACINAME) -g $(RGNAME)'
  - stage: terraform_plan
    displayName: Terraform Plan
    dependsOn: start_aci
    condition: eq(variables.destroy, false)
    pool:
      name: Contoso
      demands:
        - terraform
    jobs: 
    - job: terraform_plan
      displayName: Terraform Plan
      steps:
      - script: |
          export ARM_CLIENT_ID=$(client-id) 
          export ARM_CLIENT_SECRET=$(client-secret)
          export ARM_SUBSCRIPTION_ID=$(main-subscription-id)
          export ARM_TENANT_ID=$(tenant-id)
          terraform init
          terraform plan -out=$(System.DefaultWorkingDirectory)/$(Build.BuildId).tfplan
        displayName: Terraform Plan
        name: terraform_plan
        condition: eq(variables.destroy, false)
      - task: PublishPipelineArtifact@1
        inputs:
          targetPath: $(System.DefaultWorkingDirectory)/$(Build.BuildId).tfplan
          artifactName: $(Build.BuildId).tfplan
        displayName: Publish $(Build.BuildId).tfplan
        name: publish_plan
  - stage: terraform_apply
    displayName: Terraform Apply
    dependsOn: terraform_plan
    pool:
      name: Contoso
      demands:
        - terraform
    jobs:
    - job: manual_validation
      displayName: Manual Approval
      pool: Server
      steps:
      - task: ManualValidation@0
        inputs:
          notifyUsers: $(notifyUsers)
          instructions: 'Have you looked at the plan output?'
    - job: terraform_apply
      displayName: Terraform Apply
      dependsOn: 
        - manual_validation
      steps:
      - task: DownloadPipelineArtifact@2
        inputs:
          artifactName: $(Build.BuildId).tfplan
          patterns: '**/$(Build.BuildId).tfplan'
          path: $(System.DefaultWorkingDirectory)
        displayName: Download $(Build.BuildId).tfplan
        name: download_plan
      - script: |
          export ARM_CLIENT_ID=$(client-id) 
          export ARM_CLIENT_SECRET=$(client-secret)
          export ARM_SUBSCRIPTION_ID=$(main-subscription-id)
          export ARM_TENANT_ID=$(tenant-id)
          terraform init
          terraform apply --auto-approve $(System.DefaultWorkingDirectory)/$(Build.BuildId).tfplan
        displayName: Terraform Apply
        name: terraform_apply
  - stage: terraform_destroy
    displayName: Terraform Destroy
    dependsOn: start_aci
    condition: eq(variables.destroy, true)
    pool:
      name: Contoso
      demands: 
        - terraform
    jobs: 
    - job: manual_validation
      displayName: Approval Gate
      pool: Server
      steps:
      - task: ManualValidation@0
        inputs:
          notifyUsers: $(notifyUsers)
          instructions: 'Are you sure you want to destroy everything?'
    - job: terraform_destroy
      condition: eq(dependencies.manual_validation.result, 'Succeeded')
      displayName: Terraform Destroy
      dependsOn: manual_validation
      steps: 
      - script: |
          export ARM_CLIENT_ID=$(client-id) 
          export ARM_CLIENT_SECRET=$(client-secret)
          export ARM_SUBSCRIPTION_ID=$(main-subscription-id)
          export ARM_TENANT_ID=$(tenant-id)
          terraform init
          terraform destroy --auto-approve"
        displayName: Destroy infrastructure
        name: terraform_destroy
  - stage: stop_aci
    displayName: Build Cleanup
    dependsOn:
    - terraform_apply
    - terraform_destroy
    condition: or(succeeded('terraform_apply'), succeeded('terraform_destroy'))
    pool:
      vmImage: ubuntu-latest
    jobs:
    - job: stop_aci
      displayName: Stop build agent
      steps:
      - task: AzureCLI@2
        displayName: Stop Azure Container Instance
        inputs:
          azureSubscription: 'terraform'
          scriptType: 'bash'
          scriptLocation: 'inlineScript'
          inlineScript: 'az container stop -n $(ACINAME) -g $(RGNAME)'